/*
  Необходимо реализовать метод таким образом, чтобы он возвращал модуль числа х (если он был положительным,
  то таким и остается, если он был отрицательным – то необходимо вернуть его без знака минус).
        Пример 1:
        x=5
        результат: 5
 */

public class TestIf {
    public static int abs(int x) {
        if (x > 0) {
            return x;
        }
        return x * (-1);
    }

    /*
    Необходимо реализовать метод таким образом, чтобы он возвращал деление x на y, и при этом гарантировал, что не будет выкинута ошибка деления на 0.
    При делении на 0 следует вернуть из метода число 0.
    Подсказка: смотри ограничения на операции типов данных.
        Пример 1:
        x=5
        y=0
        результат: 0
     */
    public static int safeDiv(int x, int y) {
        if (y != 0) {
            return x / y;
        }
        return 0;
    }

    /*
    Необходимо реализовать метод таким образом, чтобы он возвращал максимальное значение из двух полученных методом чисел.
    Пример 1:
    x=5
    y=7
    результат: 7
 */
    public static int max(int x, int y) {
        if (x > y) {
            return x;
        }
        return y;
    }

    /*
    Необходимо реализовать метод таким образом, чтобы он возвращал строку, которая включает два принятых методом числа и корректно выставленный знак операции сравнения (больше, меньше, или равно).

        Пример 1:
        x=5
        y=7
        результат: “5 < 7”

        Пример 2:
        x=8
        y=-1
        результат: “8 > -1”

        Пример 3:
        x=4
        y=4
        результат: “4 == 4”
     */
    public static String makeDecision(int x, int y) {
        if (x > y) {
            return x + " > " + y;
        }
        if (x < y) {
            return x + " < " + y;
        }
        return x + " = " + y;
    }

    /*
    Необходимо реализовать метод таким образом, чтобы он возвращал максимальное из трех полученных методом чисел. Подсказка: идеальное решение включает всего две инструкции if и не содержит вложенных if.

        Пример 1:
        x=5
        y=7
        z=7
        результат: 7

        Пример 2:
        x=8
        y=-1
        z=4
        результат: 8
     */
    public static int max3(int x, int y, int z) {
        if (x >= y && x >= z) {
            return x;
        }
        if (y >= x && y >= z) {
            return y;
        }
        return z;
    }

    /*
    Необходимо реализовать метод таким образом, чтобы он возвращал true, если два любых числа (из трех принятых) можно сложить так, чтобы получить третье.

        Пример 1:
        x=5  y=7  z=2
        результат: true

        Пример 2:
        x=8  y=-1   z=4
        результат: false
  */
    public static boolean sum3(int x, int y, int z) {
        if (x + y == z) {
            return true;
        }
        if (x + z == y) {
            return true;
        }
        if (y + z == x) {
            return true;
        }
        return false;
    }
    /*
    Необходимо реализовать метод таким образом, чтобы он возвращал сумму чисел x и y. Однако, если сумма попадает в диапазон от 10 до 19, то надо вернуть число 20.

        Пример 1:
        x=5  y=7
        результат: 20

        Пример 2:
        x=8  y=-1
        результат: 7
*/
    public static int sum2(int x, int y) {
        if ((x + y) >= 10 && (x + y) <= 19) {
            return 20;
        }
        return x + y;
    }
    /*
Необходимо реализовать метод таким образом, чтобы он возвращал true, если число x делится нацело на 3 или 5.
При этом, если оно делится и на 3, и на 5, то вернуть надо false. Подсказка: оператор % позволяет получить остаток от деления.

        Пример 1:
        x=5
        результат: true

        Пример 2:
        x=8
        результат: false

        Пример 3:
        x=15
        результат: false
*/
    public static boolean is35(int x) {
        if (x % 5 == 0 && x % 3 == 0) {
            return false;
        }
        if (x % 5 == 0 || x % 3 == 0) {
            return true;
        }
        return false;
    }
}

